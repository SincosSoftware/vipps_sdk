<?php

namespace SincosSoftware\Vipps\Tests\Unit\Resource\Payment;

use GuzzleHttp\Psr7\Response;
use function GuzzleHttp\Psr7\stream_for;
use SincosSoftware\Vipps\Model\Payment\ResponseGetOrderStatus;
use SincosSoftware\Vipps\Resource\Payment\GetOrderStatus;
use SincosSoftware\Vipps\Resource\HttpMethod;

class GetOrderStatusTest extends PaymentResourceBaseTestBase
{

    /**
     * @var \SincosSoftware\Vipps\Resource\Payment\GetOrderStatus
     */
    protected $resource;

    /**
     * {@inheritdoc}
     */
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->resource = $this->getMockBuilder(GetOrderStatus::class)
            ->setConstructorArgs([
                $this->vipps,
                'test_subscription_key',
                'test_merchant_serial_number',
                'test_order_id'
            ])
            ->disallowMockingUnknownTypes()
            ->setMethods(['makeCall'])
            ->getMock();

        $this->resource
            ->expects($this->any())
            ->method('makeCall')
            ->will($this->returnValue(new Response(200, [], stream_for(json_encode([])))));
    }

    /**
     * @covers \SincosSoftware\Vipps\Resource\Payment\GetOrderStatus::getBody()
     * @covers \SincosSoftware\Vipps\Resource\Payment\GetOrderStatus::__construct()
     */
    public function testBody()
    {
        $this->assertEmpty($this->resource->getBody());
    }

    /**
     * @covers \SincosSoftware\Vipps\Resource\Payment\GetOrderStatus::getMethod()
     */
    public function testMethod()
    {
        $this->assertEquals(HttpMethod::GET, $this->resource->getMethod());
    }

    /**
     * @covers \SincosSoftware\Vipps\Resource\Payment\GetOrderStatus::getPath()
     */
    public function testPath()
    {
        $this->assertEquals(
            '/Ecomm/v2/payments/test_order_id/status',
            $this->resource->getPath()
        );
    }

    /**
     * @covers \SincosSoftware\Vipps\Resource\Payment\GetOrderStatus::call()
     */
    public function testCall()
    {
        $this->assertInstanceOf(ResponseGetOrderStatus::class, $response = $this->resource->call());
        $this->assertEquals(new ResponseGetOrderStatus(), $response);
    }
}
